#+TITLE: 【流水账】2014，一直在坚持的本命年
#+AUTHOR: 卷摸

#+Style: <link rel="stylesheet" href="org.css">

本文的作者是 *深深爱着人类* 的【我】。

这篇文章关于我的 2014。

我建立了个人网站【momo9.me】，大家多去我那看看吧。点击『阅读原文』可以访问哈~

-----

[[e:/nutstore/pictures/public/horse.jpg]]

* 2014 年的一些坚持

** 写晨间日记

2014 年 3 月 20 日，我写下自己的第一次晨间日记，总结自己前一天的生活。2015 年 1 月 1 日写的，是第 288 次。

** 锻炼身体

*** 简单的健身

每天做一些俯卧撑、仰卧起坐什么的，现在是做平板支撑。从 2014 年 4 月 27 日开始有记录，最长的一次连续坚持了 66 天，最多有一次连续 4 天没有做。

*** 运动

一周两次跑步、踢球、游泳或是羽毛球。从 2014 年 4 月 24 日开始有记录，最长一次坚持了 6 周，最多有一次一周半没有运动（上周感冒的时候……）。

** 学习

从 2014 年 7 月 1 日开始有记录。最长的一次连续 18 天都有学习，最多有一次连续 8 天没有学习新东西。

2014 年，我在 [[https://github.com/momo9][Github]] 上 commit 了 257 次，主要集中在三月、四月、五月和十二月。最长只有连续 10 天，惭愧……

*** 技术学习

**** 语言

- 《C 程序设计语言》（K & R）：重学 C 语言
- awk
- emacs org-mode
- 《SQL 必知必会》
- 《Head First HTML & CSS》
- 《Python Tutorial》

**** web

- 《JSP & Servlet 学习笔记》：了解基本的 Java web 编程
- MySQL
- Django
- webx
- ibatis
- node.js

**** 基础

- 《鸟哥的 Linux 私房菜》：Linux 的基本概念与使用
- 《算法导论》：前 12 章，做了几乎所有练习，后几章的思考题没有做
- 《大规模分布式存储系统》
- 《UNIX 网络编程》：只看了基本内容
- 《UNIX 环境高级编程》：目前还在看，看了不到一半
- 《STL 源码剖析》
- 《编程珠玑》
- 《Head First Design Patterns》

**** 找工作

- 《程序员面试攻略》
- 《程序员面试金典》

**** 其它

- Lucene：一点最基本的使用

*** 阅读

- 《活着》：福贵一家人悲惨的命运
- 《生活在哪个朝代最郁闷》：杨念群借古讽今的杂文集
- 《学会提问》：关于批判性思维
- 徐强的倒追系列
- 《人性的弱点》：鸡汤之祖卡耐基
- 《只需倾听》：现代鸡汤
- 《微观经济学（曼昆）》：就看了一章，还挺有意思的，这一段再捡起来看看~
- 《信号与噪声》：如何从纷繁的世界中提取有用的信息
- 《Pragmatic Programmer》：程序员哲学
- 《效率专家爸爸》：任何时候都非常讲究效率的一家人

** 写作

*** 读书笔记

- 《鸟哥的 Linux 私房菜》
- 《谁都无法拯救的男孩》：《红楼梦》读后感
- 《被选中者寥寥》：《少有人走的路》读后感
- 《学会提问》读书笔记
  - 《什么是谬误》
  - 《几个要点》
  - 《具体步骤》
  - 《证据的效力》
- 《活着》
- 《生活在哪个朝代最郁闷》
  - 《哪个朝代最郁闷》
  - 《哪个朝代没文化》
- 《鸡汤导论》：《人性的弱点》读书笔记
- 《只需倾听》读书笔记

*** 看电影

- 《雪国列车》观后感

*** 杂记

- 建立个人博客的教程
- 《我的理想文档环境》：关于写文档的工具
- 《工具滥用症》：对于使用不必要的工具反而浪费更多时间的一些思考
- Facebook 面试总结
- 《Be a Hacker》：关于程序员面试
- 《给摸哪一个宇宙》：星空碗制作历程

*** 阿森纳

- 《3283 天的等待》：获得足总杯后的感想
- 《冠军来了，你没来》：法布雷加斯转会切尔西的感想

*** 技术

- 《造轮子的语言》：关于 C 语言的杂谈
- ls 的实现
- fopen 的实现
- malloc 的实现

** 睡眠

_睡眠习惯很糟糕。_ 从 2014 年 5 月 7 日开始有记录，只有是这周七天都保证了七个半小时以上的睡眠，曾经连续 10 天睡眠都不足七个半小时。

* 一些胡思乱想

** 怎样使用时间

这一年，我使用两个工具来管理时间： _emacs 的 org-mode_ 以及 _toggl_ 。前者的作用是 GTD，后者的作用是跟踪时间的使用情况。

*** GTD 工具

我个人开始使用 GTD 工具的原因是生活中不同类型的任务越来越多，自己的脑子不够用，需要一个 todo-list 来保证不遗漏重要的事情。在使用的过程中，我发现 GTD 工具还能够带来以下好处。

- 通常会在做事之前先写好 todo-list，做事情更有规划了
- 没有把任务写在 todo-list 中时，感觉所有的任务是铺天盖地而来的，压力很大；将任务都写在 todo-list 里以后，对任务的量有更清晰的把握，有助于缓解压力
- GTD 工具也会统计已完成的任务，看着满眼的 _done_ 有很大的成就感

最初我使用的 todo-list 类工具是 _番茄土豆_ ，也就是番茄工作法加 todo-list。我个人使用番茄土豆的体验并不太好：一方面，我个人并不喜欢番茄工作法，25 分钟就中断一次让我无法专心工作，非常闹心；另一方面，番茄土豆中的 todo-list 非常简陋，没有太大价值。

后来我使用 _doit.im_ 作为 todo-list。这个应用的基本版是免费的，该有的功能都有了。我也尝试过付费版， _觉得功能上没有什么太大的增强。_ 

总体而言，我对 doit.im 是非常满意的。它的以下功能，已经让它成为了一个功能很强大的 GTD 工具了。

- 最基本的，用 _项目_ 的方式来管理各个事项
- 可以打 _标签，_ 以便从项目以外的第二个维度来梳理待办事项条目
- 有 _日程_ 和 _deadline_ 功能，这样就不会错过时间点了
- 任务有 _紧急程度_ 和 _优先级_ ：在 doit.im 里，分为将来也许会做的、接下来要做的、现在就要做的、等别人做完才能做的等

不过，有一个问题让我放弃了它：它没有什么可定制性。我个人一直不满意它的项目只能是一级的（付费版本可以有子项目，但仍然不够好用），不便于管理待办事项。

因此，当我后来发现了能够克服这两个问题的 _emacs org-mode_ 后，doit.im 就被我放弃了。org-mode 有这么一些特点。

- org-mode 可以说是一种标记语言，org-mode 下的 todo-list，其实就是代码
- 既然是代码， _可定制性可以说是无穷的，_ 我需要的多级项目自然没有问题
- 代码还容易管理，把代码放在云存储里只要占用很小的空间，或者直接放在代码仓库里也很方便
- 另外算是一个额外惊喜吧，org-mode 还可以像 _Markdown_ 一样用来写作，比起 Markdown 来，它的元素要丰富一些，而且得到了 emacs 非常强大的支持， _这是其它同类型的标记语言没有的一个优势_

*** 时间追踪

时间追踪，就是《奇特的一生》中柳比歇夫使用的时间管理方法。这是我在年底才开始养成的一个习惯，初步感觉效果不错。最初的目的，是想看看自己的时间到底是怎么分配的，希望能够在数据的基础上进行分析，让自己更高效一些。除了这点之外，我在使用中还发现了时间追踪的另一个好处：因为计时本身是个比较麻烦的事情，为了能够更好地计时，我会把一个任务放在一整块的时间内完成，避免自己在不同的任务之间不断切换——这本身是效率比较高的一种工作方式， _因为任务的切换实在是太耗时了。_

org-mode 也可以用来实现时间追踪。不过因为它必须在电脑上使用，我没有用它来追踪时间，毕竟干很多事情的时候，并不能使用电脑。因此，我使用 _toggl_ 来追踪时间。它在各个平台上都有客户端，并且还提供一些简单的报表。

** 接触不同类型的人真是太有必要了

物以类聚，人以群分。很多年以来，我基本上接触的都是背景相似、爱好类似的人，遇到不同类型的人不会太深入地接触。今年结交了一些背景很不同的朋友，感觉非常好。 _一些在对方看来顺利成章的事情，在我这里就显得非常新奇，甚至能解决一些困扰我很久的问题。_ 未来的日子里，希望能够和更多各式各样的人交流，更深入地了解这个多样的世界。

** 怎么样和别人更好地交流

我觉得自己属于比较外向的理科生，喜欢和别人交流，但是交流时没有什么技巧，有什么就说什么。这样和其他理科生交流还是挺融洽的，但是除此以外的人交流起来（比如 GF 和长辈），常常会有问题。

今年有很认真地在改进这一点。虽然这方面的能力还是不强，但是遵循着 _赞美他人、关注他人、倾听他人、不要好为人师、少吐槽_ 等一些原则，还是觉得自己和他人的交流愉快了不少。

** 人不人性化没有关系，关键的是有没有建立起伟大的愿景

硕士期间，导师对我们的作息要求是 _711 全年无休，_ 催活也催的非常紧。我们的结果是：虽然工作以理论研究为主，但绝大多数的同学在答辩的半个月以前还没有能够发表论文，最后是靠着质量很差的论文毕业的。

曾经，我对这一现象的理解是，不人性化的工作氛围使得大家完成基本的工作都是疲于奔命，没有精力再多动动脑子，做一些有创造性的工作。

在完成了答辩后的这段时间，我也算是获得了自由之身，可以做一些自己喜欢的事情了，可是我的表现却让自己高兴不起来。在完全没有压力的情况下，我在学习、读书、写作方面的生产力甚至比不上之前用业余时间来做这些事情的时候。

因此，我的想法发生了改变。我们没有做出好的结果，并不在于实验室过于严格的管理。很容易看到的例子就是，以不人性化而闻名的华为做出了很多很好的东西，而它击败的，正是工作氛围非常人性化的外企， _可见是否人性化并非其中的关键。_

_现在我把失败的原因归结为缺乏愿景。_ 根据自己的了解，身边的硕士中有学术愿景的人很少，很多同学的愿望是找一个好工作，自然对能够给找工作带来直接增益不大的学术研究没有什么热情。偏偏我的导师并不擅长树立愿景与鼓舞士气，在他的描述中，科研是一条没有什么乐趣可言但能够名利双收的一条“捷径”。因此，没有愿景的我们，即便工作再多的时间，也不过是应付，不过是年华在实验室中的虚耗。

** 那些不敢做的事情

给 Facebook 投简历的邮件，我足足写了一周，始终不敢发出去，觉得会悲剧。

公众号的第一篇文章，改来改去改了很久，始终不敢推送，觉得会被嫌弃。

听大牛讲座，提问前很忐忑，犹犹豫豫地手都抬不起来，觉得问题水平太低。

看别人的博客，回复的时候要想很久，觉得会被对方觉得太 low。

那些犹豫的时候，真的很想就这么算了，但看到自己的软弱，还是觉得一定要把这件令我害怕的事情做完。这些恐惧，正是来自于我的不完整， _每做一件这样的事情，就进步一点。_

** 过程与结果

从一个角度看，结果比过程重要。完成一件事情，一定要以做成为目的。为了达到这一目的，需要想尽一切办法，过程中条件再恶劣，运气再不好都不应该成为失败的理由。

从另一个角度看，过程比结果重要。这一年读到了很多非常精彩、分析问题很透彻的文章，但这些文章的作者，却仍屡屡遭受创业失败之苦。 _世界充满了噪声，使用正确的方法，却仍有可能得出错误的答案。_ 没有能够得到正确答案的正确方法，远比偶然得到正确结果的错误方法要珍贵得多。

** 不确定的世界

_世界很复杂，没法用“是或否”来解释。_

从结果上来说，不会是两极分化的：要么好上天，要么就落到谷底。极好与极坏之间，有着无穷多级的过度，真正的结果落在其中的任何一个地方。至于通常的情况么， _总是没那么好，也没那么坏。_

有的时候，则是条件非常复杂。一个判断是否成立，无法简单地判断，而需要各种条件，条件稍有变化，结果也截然不同。

还有的时候，结果是不确定的，就只是个概率而已。毕竟，我们是在用自己的观察来近似这个世界，这样的近似是不全面的。以我们掌握的信息，只能得到一个概率，而非确切的答案。

** 仅仅坚持到底，可能没用

从前有个漫画，说一个人挖金矿，每次都挖到离金矿差一点的地方就放弃努力，再换另一个地方挖，最终一无所获。由此得到结论：做事需要坚持到底。

可是，如果那个人一开始选择的地方就是错的，那么坚持到底会有用么？真正的问题在于，需要找到方法，确定深处有金矿，或者能够在挖的过程中缩小金矿的范围。否则，仅仅有那种坚持到底的精神，恐怕也毫无作用。 _分析现有状况、找到问题所在之后的坚持，才有重要的意义。_

** 可怕的仪式感

做事情有一种仪式感，必须一切条件都到位了才开始做事情。写点东西，网要好、心情要好、昨晚要睡好、饭不能吃太饱、其他人还不能太吵，要不然没法动笔……

这样的结果就是，条件始终满足不了，因此什么事也干不了。 _做什么事情一定要立即开始，有哪些地方不够好的，开始了以后再改进。_

** 哪有什么自制力

Deadline 没有到，会想要工作么？身边的人都在玩，会想要学习么？

我觉得自制力不可依靠，与其盼望自己的自制力能够督促自己，不如找个安静的地方学习以避免别人对自己的打扰，不如定好 deadline 让压力逼迫自己工作，不如找优秀的人作为同伴督促自己进步以免掉队，也不如树立一个堪称“伟大”的愿景而为之奋斗。

** 大厨与切菜

我的导师特别鄙视程序员，认为就是“编程的”，一点技术含量也没有。听他这么说，我以为他编程应该挺厉害的，不过后来发现自称精通 C 语言的他不知道什么是函数指针，我也就没有把他说的当真。

这一年去实习了，我发现初级程序员工作的技术含量还真不怎么高，工作内容的难度比面试低。不过我的同事们都很 nice，他们鼓励我在做好“脏活”的同时，也要多看资料，多思考架构，不要只干“脏活”。

我想起以前听说的大厨的成长路径。据说，做厨师学徒的话，一开始要切很多年的菜，切够了菜，才能开始做菜，才有机会慢慢成长为大厨。可是，切菜和做菜有什么关系？

我的理解是，两者之间没有关系。 _大厨之所以为大厨，不是因为切菜切的好，而是因为菜做的好，在只能切菜的那些年，切菜之余还得偷偷学着做菜，才能脱颖而出。_ 所以啊，菜还是得好好切，这是基本的任务，而业余时间的学习也不能停。毕竟我们坐在电脑前，手抚键盘，为的不是切一辈子的菜，而是要改变世界。

** 环境决定上限，个人努力决定下限

当环境很糟糕的时候，个人努力的作用非常有限，再怎么努力可能也就是那个样子了，这就是上限。

可是这不代表当环境差的时候就可以不用努力，起码努力还能无限地逼近那个上限，而不努力的话，都不知道那个下限在哪里。

** 最坏打算

过度自信是很正常的表现，比如我每天都预期自己 12 点之前肯定能睡觉，结果无一例外都是 1 点才睡。而只有预期自己 11 点睡觉的时候，才会在 12 点之前睡。鉴于这种过度自信的倾向，把事情想得坏一点，做好最坏的打算并不是什么坏事。

可是把最坏情况告诉别人似乎并非好事。个人认为，如果身为 leader，把最坏的可能告诉团队的所有成员，士气会受到很大的影响。所以范仲淹救灾的时候，会采用大宴宾客的方式来隐藏真相，安抚民心。

_大概我们需要表面镇定自若，而在内心做好最坏的打算。_
